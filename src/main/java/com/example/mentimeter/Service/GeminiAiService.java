package com.example.mentimeter.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.cloud.vertexai.VertexAI;
import com.google.cloud.vertexai.api.GenerateContentResponse;
import com.google.cloud.vertexai.generativeai.GenerativeModel;
import com.google.cloud.vertexai.generativeai.ResponseHandler;
import com.example.mentimeter.Model.Quiz; // Import your Quiz model
import com.example.mentimeter.DTO.AiQuizFromTextRequest;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
public class GeminiAiService {

    @Value("${gcp.project.id}")
    private String projectId;

    @Value("${gcp.location}")
    private String location;

    private final ObjectMapper objectMapper = new ObjectMapper();

    // --- NEW METHOD ---
    public Quiz generateQuizFromText(AiQuizFromTextRequest request) throws IOException {
        String prompt = buildQuizPromptFromText(request.getContent(), request.getNumQuestions());

        try (VertexAI vertexAi = new VertexAI(projectId, location)) {
            String modelName = "gemini-2.5-flash"; // Or your preferred model
            GenerativeModel model = new GenerativeModel(modelName, vertexAi);
            GenerateContentResponse response = model.generateContent(prompt);
            String rawJsonResponse = ResponseHandler.getText(response);

            // --- Parse the JSON string directly into a Quiz object ---
            try {
                // Clean potential markdown formatting
                rawJsonResponse = rawJsonResponse.replace("```json", "").replace("```", "").trim();

                // Parse into Quiz object
                Quiz generatedQuiz = objectMapper.readValue(rawJsonResponse, Quiz.class);

                // You might want to set default/placeholder values if AI omits them
                if (generatedQuiz.getTitle() == null || generatedQuiz.getTitle().isBlank()) {
                    generatedQuiz.setTitle("AI Generated Quiz");
                }
                // Important: Don't trust AI for username, set it later based on logged-in user
                generatedQuiz.setUsername(null);
                generatedQuiz.setShareCode(null); // Ensure these aren't set by AI
                generatedQuiz.setShared(false);
                generatedQuiz.setId(null); // ID should be generated by DB

                return generatedQuiz;
            } catch (Exception e) {
                System.err.println("Error parsing Quiz JSON response from Gemini: " + rawJsonResponse);
                System.err.println("Parser Exception: " + e.getMessage());
                throw new IOException("Failed to parse valid Quiz JSON from AI response.", e);
            }
            // --- End JSON Parsing ---

        } catch (Exception e) {
            System.err.println("Error calling Gemini API: " + e.getMessage());
            throw new IOException("Failed to generate quiz from Gemini API", e);
        }
    }

    private String buildQuizPromptFromText(String content, int numQuestions) {
        // Prompt asking for the full Quiz object structure
        return String.format(
                "Based *only* on the following text content, generate a quiz object containing %d multiple-choice questions. " +
                        "The text content is:\n\"%s\"\n\n" +
                        "The output must be a single JSON object matching this exact structure:\n" +
                        "{\n" +
                        "  \"title\": \"(Generate a concise title based on the text)\",\n" +
                        "  \"questionList\": [\n" +
                        "    {\n" +
                        "      \"text\": \"(Question text based on the content)\",\n" +
                        "      \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n" + // Exactly 4 options
                        "      \"correctAnswerIndex\": (Integer index 0-3)\n" +
                        "    }\n" +
                        "    // ... (repeat for %d questions)\n" +
                        "  ]\n" +
                        "}\n" +
                        "Do NOT include 'id', 'username', 'shareCode', or 'isShared' fields. Ensure the JSON is valid. Provide only the JSON object, with no introductory text or markdown formatting.",
                numQuestions,
                content, // The user's provided text
                numQuestions
        );
    }

    // Keep your original generateQuizQuestions method if needed for other features
    // public List<Question> generateQuizQuestions(AiQuizRequest request) throws IOException { ... }
}